<?xml version="1.0" encoding="utf-8"?>
<osmosisTaskDescription xmlns="http://uni-stuttgart.de/iev/osmosisTaskDescription"
                        formatVersion="1.0.0"
                        osmosisVersion="0.37">  
  <taskGroup id="xml" friendlyName="XML Tasks">
    <task name="read-xml" friendlyName="Read OSM XML" shortName="rx">
      <description>Reads the current contents of an OSM XML file.</description>
      <outputPipe index="0" count="single" type="entity">
        <description>
          Produces an entity stream.
        </description>
      </outputPipe>
      <parameter name="file" type="filename" defaultParameter="true" required="true" defaultValue="dump.osm">
        <description>
          The name of the osm file to be read, "-" means STDIN.
        </description>
      </parameter>
      <parameter name="enableDateParsing" type="boolean" defaultValue="true" booleanEncoding="yesno">
        <description>
          If set to yes, the dates in the osm xml file will be parsed, otherwise all dates will be set to a
          single time approximately equal to application startup. Setting this to no is only useful if
          the input file doesn't contain timestamps. It used to improve performance but date parsing
          now incurs low overhead.
        </description>
      </parameter>
      <parameter name="compressionMethod" type="enum" defaultValue="none">
        <description>
          Specifies the compression method that has been used to compress the file. In most cases this isn't
          required because the compression method will be automatically determined from the file name
          (*.gz=gzip, *.bz2=bzip2).
        </description>
        <enumValue value="none" friendlyName="None" />
        <enumValue value="gzip" />
        <enumValue value="bzip2" />
      </parameter>
    </task>

    <task name="fast-read-xml" friendlyName="Read OSM XML using STAX">
      <description>
        As per the --read-xml task but using a STAX XML parser instead of SAX for improved performance.
        This has undergone solid testing and should be reliable but all xml processing tasks have not yet been re-written to use the new implementation thus is not the default yet.
      </description>
      <outputPipe index="0" count="single" type="entity">
        <description>
          Produces an entity stream.
        </description>
      </outputPipe>
      <parameter name="file" type="filename" defaultParameter="true" required="true" defaultValue="dump.osm">
        <description>
          The name of the osm file to be read, "-" means STDIN.
        </description>
      </parameter>
      <parameter name="enableDateParsing" type="boolean" defaultValue="true" booleanEncoding="yesno">
        <description>
          If set to yes, the dates in the osm xml file will be parsed, otherwise all dates will be set to a
          single time approximately equal to application startup. Setting this to no is only useful if
          the input file doesn't contain timestamps. It used to improve performance but date parsing
          now incurs low overhead.
        </description>
      </parameter>
      <parameter name="compressionMethod" type="enum" defaultValue="none">
        <description>
          Specifies the compression method that has been used to compress the file. In most cases this isn't
          required because the compression method will be automatically determined from the file name
          (*.gz=gzip, *.bz2=bzip2).
        </description>
        <enumValue value="none" friendlyName="None" />
        <enumValue value="gzip" />
        <enumValue value="bzip2" />
      </parameter>
    </task>

    <task name="read-xml-change" friendlyName="Read OSM XML change file" shortName="rxc">
      <description>Reads the contents of an OSM XML change file.</description>
      <outputPipe index="0" count="single" type="change">
        <description>
          The name of the osm change file to be read, "-" means STDIN.
        </description>
      </outputPipe>
      <parameter name="file" type="filename" defaultParameter="true" required="true" defaultValue="change.osc">
        <description>
          The name of the osm file to be read, "-" means STDIN.
        </description>
      </parameter>
      <parameter name="enableDateParsing" type="boolean" defaultValue="true" booleanEncoding="yesno">
        <description>
          If set to yes, the dates in the osm xml file will be parsed, otherwise all dates will be set to a
          single time approximately equal to application startup. Setting this to no is only useful if
          the input file doesn't contain timestamps. It used to improve performance but date parsing
          now incurs low overhead.
        </description>
      </parameter>
      <parameter name="compressionMethod" type="enum" defaultValue="none">
        <description>
          Specifies the compression method that has been used to compress the file. In most cases this isn't
          required because the compression method will be automatically determined from the file name
          (*.gz=gzip, *.bz2=bzip2).
        </description>
        <enumValue value="none" friendlyName="None" />
        <enumValue value="gzip" />
        <enumValue value="bzip2" />
      </parameter>
    </task>

    <task name="write-xml" friendlyName="Write OSM XML" shortName="wx">
      <description>Writes data to an OSM XML file.</description>
      <inputPipe index="0" count="single" type="entity">
        <description>
          Consumes an entity stream.
        </description>
      </inputPipe>
      <parameter name="file" type="filename" defaultParameter="true" required="true" defaultValue="dump.osm">
        <description>
          The name of the osm file to be written, "-" means STDOUT.
        </description>
      </parameter>
      <parameter name="compressionMethod" type="enum" defaultValue="none">
        <description>
          Specifies the compression method that has been used to compress the file. In most cases this isn't
          required because the compression method will be automatically determined from the file name
          (*.gz=gzip, *.bz2=bzip2).
        </description>
        <enumValue value="none" friendlyName="None" />
        <enumValue value="gzip" />
        <enumValue value="bzip2" />
      </parameter>
    </task>

    <task name="write-xml-change" friendlyName="Write OSM XML change" shortName="wxc">
      <description>Writes changes to an OSM XML change file.</description>
      <inputPipe index="0" count="single" type="change">
        <description>
          Consumes an change stream.
        </description>
      </inputPipe>
      <parameter name="file" type="filename" defaultParameter="true" required="true" defaultValue="change.osc">
        <description>
          The name of the osm change file to be written, "-" means STDOUT.
        </description>
      </parameter>
      <parameter name="compressionMethod" type="enum" defaultValue="none">
        <description>
          Specifies the compression method that has been used to compress the file. In most cases this isn't
          required because the compression method will be automatically determined from the file name
          (*.gz=gzip, *.bz2=bzip2).
        </description>
        <enumValue value="none" friendlyName="None" />
        <enumValue value="gzip" />
        <enumValue value="bzip2" />
      </parameter>
    </task>
  </taskGroup>

  <taskGroup id="apidb" friendlyName="API Database Tasks">
    <description>
      The tasks are to be used with the schema that backs the OSM API. These tasks support the 0.6 database only, and support both PostgreSQL and MySQL variants. It is highly recommended to use PostgreSQL due to the better testing it receives.
    </description>

    <task name="read-apidb" shortName="rd">
      <description>
        Reads the contents of an API database at a specific point in time.
      </description>
      <outputPipe count="single"  index="0" type="entity" />
      <parameter name="authFile" defaultParameter="false" required="false" type="filename">
        <description>
          The name of the file containing database login credentials.
        </description>
      </parameter>
      <parameter name="host" defaultParameter="false" required="false" defaultValue="localhost" type="string">
        <description>
          The database host server.
        </description>
      </parameter>
      <parameter name="database" defaultParameter="false" required="false" defaultValue="osm" type="string">
        <description>
          The database instance.
        </description>
      </parameter>
      <parameter name="user" defaultParameter="false" required="false" defaultValue="osm" type="string">
        <description>
          The database user name.
        </description>
      </parameter>
      <parameter name="password" defaultParameter="false" required="false" type="string">
        <description>
          The database password.
        </description>
      </parameter>
      <parameter name="dbType" defaultParameter="false" required="false" type="enum">
        <description>
          The type of database being used.
        </description>
        <enumValue value="postgresql" />
        <enumValue value="mysql" />
      </parameter>
      <parameter name="validateSchemaVersion" defaultParameter="false" required="false" defaultValue="true" type="boolean" booleanEncoding="yesno">
        <description>
          If yes is specified, the task will validate the current schema version before accessing the database.
        </description>
      </parameter>
      <parameter name="allowIncorrectSchemaVersion" defaultParameter="false" required="false" defaultValue="true" type="boolean" booleanEncoding="yesno">
        <description>
          If validateSchemaVersion is yes, this option controls the result of a schema version check failure. If this option is yes, a warning is displayed and execution continues. If this option is no, an error is displayed and the program aborts.
        </description>
      </parameter>
      <parameter name="readAllUsers" defaultParameter="false" required="false" defaultValue="false" type="boolean" booleanEncoding="yesno">
        <description>
          If set to yes, the user public edit flag will be ignored and user information will be attached to every entity.
        </description>
      </parameter>
      <parameter name="snapshotInstant" defaultParameter="false" required="false" type="instant">
        <description>
          Defines the point in time for which to produce a data snapshot. Format is "yyyy-MM-dd_HH:mm:ss".
        </description>
      </parameter>
    </task>
    

  <task name="read-apidb-current" shortName="rdcur">
    <description>
      Reads the current contents of an API database. Note that this task cannot be used as a starting point for replication because it does not produce a consistent snapshot.
    </description>
    <outputPipe count="single"  index="0" type="entity" />
    <parameter name="authFile" defaultParameter="false" required="false" type="filename">
      <description>
        The name of the file containing database login credentials.
      </description>
    </parameter>
    <parameter name="host" defaultParameter="false" required="false" defaultValue="localhost" type="string">
      <description>
        The database host server.
      </description>
    </parameter>
    <parameter name="database" defaultParameter="false" required="false" defaultValue="osm" type="string">
      <description>
        The database instance.
      </description>
    </parameter>
    <parameter name="user" defaultParameter="false" required="false" defaultValue="osm" type="string">
      <description>
        The database user name.
      </description>
    </parameter>
    <parameter name="password" defaultParameter="false" required="false" type="string">
      <description>
        The database password.
      </description>
    </parameter>
    <parameter name="dbType" defaultParameter="false" required="false" type="enum">
      <description>
        The type of database being used.
      </description>
      <enumValue value="postgresql" />
      <enumValue value="mysql" />
    </parameter>
    <parameter name="validateSchemaVersion" defaultParameter="false" required="false" defaultValue="true" type="boolean" booleanEncoding="yesno">
      <description>
        If yes is specified, the task will validate the current schema version before accessing the database.
      </description>
    </parameter>
    <parameter name="allowIncorrectSchemaVersion" defaultParameter="false" required="false" defaultValue="true" type="boolean" booleanEncoding="yesno">
      <description>
        If validateSchemaVersion is yes, this option controls the result of a schema version check failure. If this option is yes, a warning is displayed and execution continues. If this option is no, an error is displayed and the program aborts.
      </description>
    </parameter>
    <parameter name="readAllUsers" defaultParameter="false" required="false" defaultValue="false" type="boolean" booleanEncoding="yesno">
      <description>
        If set to yes, the user public edit flag will be ignored and user information will be attached to every entity.
      </description>
    </parameter>
  </task>

    <task name="write-apidb" shortName="wd">
      <description>
        Populates an empty API database.
      </description>
      <inputPipe count="single" index="0" type="entity" />
      <parameter name="authFile" defaultParameter="false" required="false" type="filename">
        <description>
          The name of the file containing database login credentials.
        </description>
      </parameter>
      <parameter name="host" defaultParameter="false" required="false" defaultValue="localhost" type="string">
        <description>
          The database host server.
        </description>
      </parameter>
      <parameter name="database" defaultParameter="false" required="false" defaultValue="osm" type="string">
        <description>
          The database instance.
        </description>
      </parameter>
      <parameter name="user" defaultParameter="false" required="false" defaultValue="osm" type="string">
        <description>
          The database user name.
        </description>
      </parameter>
      <parameter name="password" defaultParameter="false" required="false" type="string">
        <description>
          The database password.
        </description>
      </parameter>
      <parameter name="dbType" defaultParameter="false" required="false" type="enum">
        <description>
          The type of database being used.
        </description>
        <enumValue value="postgresql" />
        <enumValue value="mysql" />
      </parameter>
      <parameter name="validateSchemaVersion" defaultParameter="false" required="false" defaultValue="true" type="boolean" booleanEncoding="yesno">
        <description>
          If yes is specified, the task will validate the current schema version before accessing the database.
        </description>
      </parameter>
      <parameter name="allowIncorrectSchemaVersion" defaultParameter="false" required="false" defaultValue="true" type="boolean" booleanEncoding="yesno">
        <description>
          If validateSchemaVersion is yes, this option controls the result of a schema version check failure. If this option is yes, a warning is displayed and execution continues. If this option is no, an error is displayed and the program aborts.
        </description>
      </parameter>
      <parameter name="lockTables" defaultParameter="false" required="false" defaultValue="true" type="boolean" booleanEncoding="yesno">
        <description>
          If yes is specified, tables will be locked during the import. This provides measurable performance improvements but prevents concurrent queries.
        </description>
      </parameter>
      <parameter name="populateCurrentTables" defaultParameter="false" required="false" defaultValue="true" type="boolean" booleanEncoding="yesno">
        <description>
          If yes is specified, the current tables will be populated after the initial history table population. If only history tables are required, this reduces the import time by approximately 80%.
        </description>
      </parameter>
    </task>

    <task name="read-apidb-change" shortName="rdc">
      <description>
        Reads the changes for a specific time interval from an API database.
      </description>
      <outputPipe count="single"  index="0" type="change" />
      <parameter name="authFile" defaultParameter="false" required="false" type="filename">
        <description>
          The name of the file containing database login credentials.
        </description>
      </parameter>
      <parameter name="host" defaultParameter="false" required="false" defaultValue="localhost" type="string">
        <description>
          The database host server.
        </description>
      </parameter>
      <parameter name="database" defaultParameter="false" required="false" defaultValue="osm" type="string">
        <description>
          The database instance.
        </description>
      </parameter>
      <parameter name="user" defaultParameter="false" required="false" defaultValue="osm" type="string">
        <description>
          The database user name.
        </description>
      </parameter>
      <parameter name="password" defaultParameter="false" required="false" type="string">
        <description>
          The database password.
        </description>
      </parameter>
      <parameter name="dbType" defaultParameter="false" required="false" type="enum">
        <description>
          The type of database being used.
        </description>
        <enumValue value="postgresql" />
        <enumValue value="mysql" />
      </parameter>
      <parameter name="validateSchemaVersion" defaultParameter="false" required="false" defaultValue="true" type="boolean" booleanEncoding="yesno">
        <description>
          If yes is specified, the task will validate the current schema version before accessing the database.
        </description>
      </parameter>
      <parameter name="allowIncorrectSchemaVersion" defaultParameter="false" required="false" defaultValue="true" type="boolean" booleanEncoding="yesno">
        <description>
          If validateSchemaVersion is yes, this option controls the result of a schema version check failure. If this option is yes, a warning is displayed and execution continues. If this option is no, an error is displayed and the program aborts.
        </description>
      </parameter>
      <parameter name="readAllUsers" defaultParameter="false" required="false" defaultValue="false" type="boolean" booleanEncoding="yesno">
        <description>
          If set to yes, the user public edit flag will be ignored and user information will be attached to every entity.
        </description>
      </parameter>
      <parameter name="intervalBegin" defaultParameter="false" required="false" type="instant">
        <description>
          Defines the beginning of the interval for which to produce a change set. Format is "yyyy-MM-dd_HH:mm:ss".
        </description>
      </parameter>
      <parameter name="intervalEnd" defaultParameter="false" required="false" type="instant">
        <description>
          Defines the beginning of the interval for which to produce a change set. Format is "yyyy-MM-dd_HH:mm:ss".
        </description>
      </parameter>
      <parameter name="readFullHistory" defaultParameter="false" required="false" defaultValue="false" type="boolean" booleanEncoding="yesno">
        <description>
          If set to yes, complete history for the specified time interval is produced instead of a single change per entity modified in that interval. This is not useful for standard changesets, it is useful if a database replica with full history is being produced. Change files produced using this option will likely not be able to be processed by most tools supporting the *.osc file format.
        </description>
      </parameter>
    </task>
    
    <task name="write-apidb-change" shortName="wdc">
      <description>
        Applies a changeset to an existing populated API database.
      </description>
      <inputPipe count="single" index="0" type="change" />
      <parameter name="authFile" defaultParameter="false" required="false" type="filename">
        <description>
          The name of the file containing database login credentials.
        </description>
      </parameter>
      <parameter name="host" defaultParameter="false" required="false" defaultValue="localhost" type="string">
        <description>
          The database host server.
        </description>
      </parameter>
      <parameter name="database" defaultParameter="false" required="false" defaultValue="osm" type="string">
        <description>
          The database instance.
        </description>
      </parameter>
      <parameter name="user" defaultParameter="false" required="false" defaultValue="osm" type="string">
        <description>
          The database user name.
        </description>
      </parameter>
      <parameter name="password" defaultParameter="false" required="false" type="string">
        <description>
          The database password.
        </description>
      </parameter>
      <parameter name="dbType" defaultParameter="false" required="false" type="enum">
        <description>
          The type of database being used.
        </description>
        <enumValue value="postgresql" />
        <enumValue value="mysql" />
      </parameter>
      <parameter name="validateSchemaVersion" defaultParameter="false" required="false" defaultValue="true" type="boolean" booleanEncoding="yesno">
        <description>
          If yes is specified, the task will validate the current schema version before accessing the database.
        </description>
      </parameter>
      <parameter name="allowIncorrectSchemaVersion" defaultParameter="false" required="false" defaultValue="true" type="boolean" booleanEncoding="yesno">
        <description>
          If validateSchemaVersion is yes, this option controls the result of a schema version check failure. If this option is yes, a warning is displayed and execution continues. If this option is no, an error is displayed and the program aborts.
        </description>
      </parameter>
      <parameter name="populateCurrentTables" defaultParameter="false" required="false" defaultValue="true" type="boolean" booleanEncoding="yesno">
        <description>
          If yes is specified, the current tables will be populated after the initial history table population. If only history tables are required, this reduces the import time by approximately 80%.
        </description>
      </parameter>
    </task>

    <task name="truncate-apidb" shortName="td">
      <description>
        Truncates all current and history tables in an API database.
      </description>
      <parameter name="authFile" defaultParameter="false" required="false" type="filename">
        <description>
          The name of the file containing database login credentials.
        </description>
      </parameter>
      <parameter name="host" defaultParameter="false" required="false" defaultValue="localhost" type="string">
        <description>
          The database host server.
        </description>
      </parameter>
      <parameter name="database" defaultParameter="false" required="false" defaultValue="osm" type="string">
        <description>
          The database instance.
        </description>
      </parameter>
      <parameter name="user" defaultParameter="false" required="false" defaultValue="osm" type="string">
        <description>
          The database user name.
        </description>
      </parameter>
      <parameter name="password" defaultParameter="false" required="false" type="string">
        <description>
          The database password.
        </description>
      </parameter>
      <parameter name="dbType" defaultParameter="false" required="false" type="enum">
        <description>
          The type of database being used.
        </description>
        <enumValue value="postgresql" />
        <enumValue value="mysql" />
      </parameter>
      <parameter name="validateSchemaVersion" defaultParameter="false" required="false" defaultValue="true" type="boolean" booleanEncoding="yesno">
        <description>
          If yes is specified, the task will validate the current schema version before accessing the database.
        </description>
      </parameter>
      <parameter name="allowIncorrectSchemaVersion" defaultParameter="false" required="false" defaultValue="true" type="boolean" booleanEncoding="yesno">
        <description>
          If validateSchemaVersion is yes, this option controls the result of a schema version check failure. If this option is yes, a warning is displayed and execution continues. If this option is no, an error is displayed and the program aborts.
        </description>
      </parameter>
    </task>
  </taskGroup>

  <taskGroup id="area" friendlyName="Area Filtering Tasks">
    <task name="bounding-box" shortName="bb">
      <description>
        Extracts data within a specific bounding box defined by lat/lon coordinates.
      </description>
      <inputPipe count="single" index="0" type="entity" />
      <outputPipe count="single" index="0" type="entity" />
      <parameter name="bbox" type="bbox" required="true">
        <description>The bounding box to filter.</description>
      </parameter>
      <parameter name="completeWays" type="boolean" booleanEncoding="yesno" defaultValue="false">
        <description>
          Include all available nodes for ways which have at least one node in the bounding box.
        </description>
      </parameter>
      <parameter name="completeRelations" type="boolean" booleanEncoding="yesno" defaultValue="false">
        <description>
          Include all available relations which are members of relations which have at least one member in the bounding box.
        </description>
      </parameter>
      <parameter name="idTrackerType" type="enum" defaultValue="Dynamic">
        <description>
          Specifies the memory mechanism for tracking selected ids. BitSet is more efficient for very large bounding boxes
          (where node count is greater than 1/32 of maximum node id), IdList will be more efficient for all smaller
          bounding boxes. Dynamic breaks the overall id range into small segments and chooses the most efficient of
          IdList or BitSet for that interval.
        </description>
        <enumValue value="Dynamic" />
        <enumValue value="BitSet" />
        <enumValue value="IdList" />
      </parameter>
      <parameter name="clipIncompleteEntities" type="boolean" booleanEncoding="truefalse" defaultValue="false">
        <description>
          Specifies what the behaviour should be when entities are encountered that have missing
          relationships with other entities. For example, ways with missing nodes, and relations with
          missing members. This occurs most often at the boundaries of selection areas,
          but may also occur due to referential integrity issues in the database or inconsistencies in the
          planet file snapshot creation. If set to true the entities are modified to remove the missing
          references, otherwise they're left intact.
        </description>
      </parameter>
    </task>
    <task name="bounding-polygon" shortName="bp">
      <description>
        Extracts data within a polygon defined by series of lat/lon coordinates loaded from a polygon file.
      </description>
      <inputPipe count="single" index="0" type="entity" />
      <outputPipe count="single" index="0" type="entity" />
      <parameter name="file" type="filename" defaultValue="polygon.text">
        <description>
          The file containing the polygon definition.
        </description>
      </parameter>
      <parameter name="completeWays" type="boolean" booleanEncoding="yesno" defaultValue="false">
        <description>
          Include all available nodes for ways which have at least one node in the bounding box.
        </description>
      </parameter>
      <parameter name="completeRelations" type="boolean" booleanEncoding="yesno" defaultValue="false">
        <description>
          Include all available relations which are members of relations which have at least one member in the bounding box.
        </description>
      </parameter>
      <parameter name="idTrackerType" type="enum" defaultValue="Dynamic">
        <description>
          Specifies the memory mechanism for tracking selected ids. BitSet is more efficient for very large bounding boxes
          (where node count is greater than 1/32 of maximum node id), IdList will be more efficient for all smaller
          bounding boxes. Dynamic breaks the overall id range into small segments and chooses the most efficient of
          IdList or BitSet for that interval.
        </description>
        <enumValue value="Dynamic" />
        <enumValue value="BitSet" />
        <enumValue value="IdList" />
      </parameter>
      <parameter name="clipIncompleteEntities" type="boolean" booleanEncoding="truefalse" defaultValue="false">
        <description>
          Specifies what the behaviour should be when entities are encountered that have missing
          relationships with other entities. For example, ways with missing nodes, and relations with
          missing members. This occurs most often at the boundaries of selection areas,
          but may also occur due to referential integrity issues in the database or inconsistencies in the
          planet file snapshot creation. If set to true the entities are modified to remove the missing
          references, otherwise they're left intact.
        </description>
      </parameter>
    </task>
  </taskGroup>

  <taskGroup id="pipeline" friendlyName="Pipeline Control Tasks">
    <task name="write-null" shortName="wn">
      <description>
        Discards all input data. This is useful for osmosis performance testing and for testing the integrity of input files.
      </description>
      <inputPipe type="entity" count="single" index="0" />
    </task>

    <task name="write-null-change" shortName="wnc">
      <description>
        Discards all input change data. This is useful for osmosis performance testing and for testing the integrity of input files.
      </description>
      <inputPipe type="change" count="single" index="0" />
    </task>

    <task name="buffer" shortName="b">
      <description>
        Allows the pipeline processing to be split across multiple threads. The thread for the input task will post data into a
        buffer of fixed capacity and block when the buffer fills. This task creates a new thread that reads from the buffer
        and blocks if no data is available. This is useful if multiple CPUs are available and multiple tasks consume
        significant CPU.
      </description>
      <inputPipe type="entity" count="single" index="0" />
      <outputPipe type="entity" count="single" index="0" />
      <parameter name="bufferCapacity" type="int" defaultValue="100" defaultParameter="true">
        <description>
          The size of the storage buffer. This is defined in terms of the number of entity objects to be stored.
          An entity corresponds to an OSM type such as a node.
        </description>
      </parameter>
    </task>

    <task name="buffer-change" shortName="bc">
      <description>
        Allows the pipeline processing to be split across multiple threads. The thread for the input task will post data into a
        buffer of fixed capacity and block when the buffer fills. This task creates a new thread that reads from the buffer
        and blocks if no data is available. This is useful if multiple CPUs are available and multiple tasks consume
        significant CPU.
      </description>
      <inputPipe type="change" count="single" index="0" />
      <outputPipe type="change" count="single" index="0" />
      <parameter name="bufferCapacity" type="int" defaultValue="100" defaultParameter="true">
        <description>
          The size of the storage buffer. This is defined in terms of the number of change objects to be stored.
          A change object consists of a single entity with an associated action.
        </description>
      </parameter>
    </task>

    <task name="log-progress" shortName="lp">
      <description>
        Logs progress information using jdk logging at info level at regular intervals.
        This can be inserted into the pipeline to allow the progress of long running tasks to be tracked.
      </description>
      <inputPipe type="entity" count="single" index="0" />
      <outputPipe type="entity" count="single" index="0" />
      <parameter name="interval" type="int" defaultValue="5">
        <description>The time interval between updates in seconds.</description>
      </parameter>
    </task>

    <task name="log-progress-change" shortName="lpc">
      <description>
        Logs progress of a change stream using jdk logging at info level at regular intervals.
        This can be inserted into the pipeline to allow the progress of long running tasks to be tracked.
      </description>
      <inputPipe type="change" count="single" index="0" />
      <outputPipe type="change" count="single" index="0" />
      <parameter name="interval" type="int" defaultValue="5">
        <description>The time interval between updates in seconds.</description>
      </parameter>
    </task>

    <task name="tee" shortName="t" friendlyName="Tee">
      <description>
        Receives a single stream of data and sends it to multiple destinations.
        This is useful if you wish to read a single source of data and apply multiple operations on it.
      </description>
      <inputPipe index="0" count="single" type="entity" />
      <outputPipe count="variable" specifiedBy="outputCount" type="entity" />
      <parameter name="outputCount" defaultParameter="true" type="int" required="true" defaultValue="2" >
        <description>The number of destinations to write this data to.</description>
      </parameter>
    </task>

    <task name="tee-change" shortName="tc">
      <description>
        Receives a single stream of data and sends it to multiple destinations.
        This is useful if you wish to read a single source of data and apply multiple operations on it.
      </description>
      <inputPipe index="0" count="single" type="change" />
      <outputPipe count="variable" specifiedBy="outputCount" type="change" />
      <parameter name="outputCount" defaultParameter="true" type="int" required="true" defaultValue="2" >
        <description>The number of destinations to write this data to.</description>
      </parameter>
    </task>
  </taskGroup>

  <taskGroup id="data-manipulation" friendlyName="Data Manipulation Tasks">
    <task name="node-key" shortName="nk">
      <description>
        Given a list of "key" tags, this filter passes on only those nodes that have at least one of those tags set.
        Note that this filter only operates on nodes. All ways and relations are filtered out.
      </description>
      <inputPipe type="entity" count="single" index="0" />
      <outputPipe type="entity" count="single" index="0" />
      <parameter name="keyList" type="string">
        <description>Comma-separated list of desired keys.</description>
      </parameter>
    </task>

    <task name="node-key-value" shortName="nkv">
      <description>
        Given a list of "key.value" tags, this filter passes on only those nodes that have at least one of those tags set.
        Note that this filter only operates on nodes. All ways and relations are filtered out.
      </description>
      <inputPipe type="entity" count="single" index="0" />
      <outputPipe type="entity" count="single" index="0" />
      <parameter name="keyValueList" type="string">
        <description>Comma-separated list of desired key.value combinations.</description>
      </parameter>
    </task>

    <task name="way-key" shortName="wk">
      <description>
        Given a list of "key" tags, this filter passes on only those ways that have at least one of those tags set.
        Note that this filter only operates on ways. All nodes and relations are passed on unmodified.
      </description>
      <inputPipe type="entity" count="single" index="0" />
      <outputPipe type="entity" count="single" index="0" />
      <parameter name="keyList" type="string">
        <description>Comma-separated list of desired keys.</description>
      </parameter>
    </task>

    <task name="way-key-value" shortName="wkv">
      <description>
        Given a list of "key.value" tags, this filter passes on only those ways that have at least one of those tags set.
        Note that this filter only operates on ways. All nodes and relations are passed on unmodified.
      </description>
      <inputPipe type="entity" count="single" index="0" />
      <outputPipe type="entity" count="single" index="0" />
      <parameter name="keyValueList" type="string">
        <description>Comma-separated list of desired key.value combinations.</description>
      </parameter>
    </task>
    
    <task name="tag-filter" shortName="tf">
      <description>
        Filters entities based on their type and optionally based on their tags. 
        Can accept or reject entities that match the filter specification.
      </description>
      <inputPipe type="entity" count="single" index="0" />
      <outputPipe type="entity" count="single" index="0" />
      <parameter name="keyValueList" type="string">
        <description>
          A two-field dash-separated string which specifies accept/reject behavior and the entity type on 
          which this filter operates.
        </description>
      </parameter>
    </task>

    <task name="used-node" shortName="un">
      <description>
        Restricts output of nodes to those that are used in ways.
      </description>
      <inputPipe type="entity" count="single" index="0" />
      <outputPipe type="entity" count="single" index="0" />
      <parameter name="idTrackerType" type="enum" defaultValue="IdList">
        <description>
          Specifies the memory mechanism for tracking selected ids. BitSet is more efficient for very large bounding boxes
          (where node count is greater than 1/32 of maximum node id), IdList will be more efficient for all smaller
          bounding boxes.
        </description>
        <enumValue value="BitSet" />
        <enumValue value="IdList" />
      </parameter>
    </task>
  </taskGroup>

  <taskGroup id="set" friendlyName="Set Manipulation Tasks">
    <task name="sort" shortName="s">
      <description>
        Sorts all data in an entity stream according to a specified ordering. This uses a file-based merge sort
        keeping memory usage to a minimum and allowing arbitrarily large data sets to be sorted.
      </description>
      <inputPipe type="entity" count="single" index="0" />
      <outputPipe type="entity" count="single" index="0" />
    </task>

    <task name="sort-change" shortName="sc">
      <description>
        Sorts all data in a change stream according to a specified ordering. This uses a file-based merge sort
        keeping memory usage to a minimum and allowing arbitrarily large data sets to be sorted.
      </description>
      <inputPipe type="change" count="single" index="0" />
      <outputPipe type="change" count="single" index="0" />
      <parameter name="type" type="enum" defaultValue="streamable" defaultParameter="true">
        <description>
          The ordering to apply to the data.
        </description>
        <enumValue value="streamable">
          <description>
            This specifies to sort by the entity type (eg. nodes before ways), then by the entity id.
            This allows a change to be applied to an xml file.
          </description>
        </enumValue>
        <enumValue value="seekable">
          <description>
            This sorts data so that it can be applied to a database without violating referential integrity.
          </description>
        </enumValue>
      </parameter>
    </task>
    <task name="merge" shortName="m">
      <description>
        Merges the contents of two data sources together.
        Note that this task requires both input streams to be sorted first by type then by id.
      </description>
      <inputPipe type="entity" count="single" index="0" />
      <inputPipe type="entity" count="single" index="1" />
      <outputPipe type="entity" count="single" index="0" />
      <parameter name="conflictResolutionMethod" type="enum" defaultValue="version">
        <description>
          The method to use for resolving conflicts between data from the two sources.
        </description>
        <enumValue value="version">
          <description>Choose the entity with the highest version, and second input source if both versions are identical.</description>
        </enumValue>
        <enumValue value="timestamp">
          <description>Choose the entity with the newest timestamp.</description>
        </enumValue>
        <enumValue value="lastSource">
          <description>Choose the entity from the second input source.</description>
        </enumValue>
      </parameter>
    </task>
    <task name="merge-change" shortName="mc">
      <description>
        Merges the contents of two changesets together.
        Note that this task requires both input streams to be sorted first by type then by id.
      </description>
      <inputPipe type="change" count="single" index="0" />
      <inputPipe type="change" count="single" index="1" />
      <outputPipe type="change" count="single" index="0" />
      <parameter name="conflictResolutionMethod" type="enum" defaultValue="version">
        <description>
          The method to use for resolving conflicts between data from the two sources.
        </description>
        <enumValue value="version">
          <description>Choose the entity with the highest version, and second input source if both versions are identical.</description>
        </enumValue>
        <enumValue value="timestamp">
          <description>Choose the entity with the newest timestamp.</description>
        </enumValue>
        <enumValue value="lastSource">
          <description>Choose the entity from the second input source.</description>
        </enumValue>
      </parameter>
    </task>
    <task name="append-change" shortName="apc">
      <description>
        Combines multiple change streams into a single change stream. The data from each input is consumed in sequence so that the result
        is a concatenation of data from each source. This output stream stream will be unsorted and may need to be fed through
        a --sort-change task.
        This task is intended for use with full history change files. If delta change files are being used
        (i.e. only one change per entity per file), then the --merge-change task may be more appropriate.
      </description>
      <inputPipe type="change" count="variable" specifiedBy="sourceCount" />
      <outputPipe type="change" count="single" index="0" />
      <parameter name="sourceCount" type="int" defaultValue="2">
        <description>
          The number of change streams to be appended.
        </description>
      </parameter>
    </task>
    <task name="simplify-change" shortName="simc">
      <description>
        Collapses a "full-history" change stream into a "delta" change stream. The result of this operation
        is a change stream guaranteed to contain a maximum of one change per entity. For example, if an entity is 
        created and modified in a single change file, this task will modify
        it to be a single create operation with the data of the modify operation.
      </description>
      <inputPipe type="change" count="single" index="0" />
      <outputPipe type="change" count="single" index="0" />
    </task>
  </taskGroup>

  <taskGroup id="changeset" friendlyName="Changeset Derivation and Merging Tasks">
    <description>
      These tasks provide the glue between osm and osc files by allowing changes to be derived from and merged into osm files.
    </description>
    <task name="derive-change" shortName="dc">
      <description>
        Compares two data sources and produces a changeset of the differences. Note that this task requires both input streams to be sorted first by type then by id.
      </description>
      <inputPipe index="0" count="single" type="entity" />
      <inputPipe index="1" count="single" type="entity" />
      <outputPipe index="0" count="single" type="change" />
    </task>
    <task name="apply-change" shortName="ac">
      <description>
        Applies a change stream to a data stream. Note that this task requires both input streams to be sorted first by type then by id.
      </description>
      <inputPipe index="0" count="single" type="entity" />
      <inputPipe index="1" count="single" type="change" />
      <outputPipe index="0" count="single" type="entity" />
    </task>

  </taskGroup>

  <taskGroup id="postgis" friendlyName="PostGIS Tasks">
    <description>
      Osmosis provides a PostGIS schema for storing a snapshot of OSM data. All geo-spatial aspects of the data are stored using PostGIS geometry data types. Node locations are always stored as a point. Ways are related to nodes as in the normal API schema, however they may optionally have bounding box and/or full linestring columns added as well allowing a full set of geo-spatial operations to be performed on them.
    </description>
    <task name="read-pgsql" shortName="rp">
      <description>
        Reads the contents of a PostGIS database at a specific point in time.
      </description>
      <outputPipe count="single"  index="0" type="dataset" />
      <parameter name="authFile" defaultParameter="false" required="false" type="filename">
        <description>
          The name of the file containing database login credentials.
        </description>
      </parameter>
      <parameter name="host" defaultParameter="false" required="false" defaultValue="localhost" type="string">
        <description>
          The database host server.
        </description>
      </parameter>
      <parameter name="database" defaultParameter="false" required="false" defaultValue="osm" type="string">
        <description>
          The database instance.
        </description>
      </parameter>
      <parameter name="user" defaultParameter="false" required="false" defaultValue="osm" type="string">
        <description>
          The database user name.
        </description>
      </parameter>
      <parameter name="password" defaultParameter="false" required="false" type="string">
        <description>
          The database password.
        </description>
      </parameter>
      <parameter name="validateSchemaVersion" defaultParameter="false" required="false" defaultValue="true" type="boolean" booleanEncoding="yesno">
        <description>
          If yes is specified, the task will validate the current schema version before accessing the database.
        </description>
      </parameter>
      <parameter name="allowIncorrectSchemaVersion" defaultParameter="false" required="false" defaultValue="true" type="boolean" booleanEncoding="yesno">
        <description>
          If validateSchemaVersion is yes, this option controls the result of a schema version check failure. If this option is yes, a warning is displayed and execution continues. If this option is no, an error is displayed and the program aborts.
        </description>
      </parameter>
    </task>

    <task name="write-pgsql" shortName="wp">
      <description>
        Populates an empty PostGIS database with a "simple" schema. A schema creation script is available in the osmosis script directory.
      </description>
      <inputPipe count="single"  index="0" type="entity" />
      <parameter name="authFile" defaultParameter="false" required="false" type="filename">
        <description>
          The name of the file containing database login credentials.
        </description>
      </parameter>
      <parameter name="host" defaultParameter="false" required="false" defaultValue="localhost" type="string">
        <description>
          The database host server.
        </description>
      </parameter>
      <parameter name="database" defaultParameter="false" required="false" defaultValue="osm" type="string">
        <description>
          The database instance.
        </description>
      </parameter>
      <parameter name="user" defaultParameter="false" required="false" defaultValue="osm" type="string">
        <description>
          The database user name.
        </description>
      </parameter>
      <parameter name="password" defaultParameter="false" required="false" type="string">
        <description>
          The database password.
        </description>
      </parameter>
      <parameter name="validateSchemaVersion" defaultParameter="false" required="false" defaultValue="true" type="boolean" booleanEncoding="yesno">
        <description>
          If yes is specified, the task will validate the current schema version before accessing the database.
        </description>
      </parameter>
      <parameter name="allowIncorrectSchemaVersion" defaultParameter="false" required="false" defaultValue="true" type="boolean" booleanEncoding="yesno">
        <description>
          If validateSchemaVersion is yes, this option controls the result of a schema version check failure. If this option is yes, a warning is displayed and execution continues. If this option is no, an error is displayed and the program aborts.
        </description>
      </parameter>
      <parameter name="enableBboxBuilder" defaultParameter="false" required="false" defaultValue="false" type="boolean" booleanEncoding="yesno">
        <description>
          If yes is specified, the task will build the bbox geometry column using a java-based solution instead of running a post-import query. Using this option provides significant performance improvements compared to the default query approach. Note that the task will fail if this option is enabled and the bbox column doesn't exist.
        </description>
      </parameter>
      <parameter name="enableLinestringBuilder" defaultParameter="false" required="false" defaultValue="false" type="boolean" booleanEncoding="yesno">
        <description>
          As per the enableBboxBuilder option but for the linestring geometry column.
        </description>
      </parameter>
      <parameter name="nodeLocationStoreType" defaultParameter="false" required="false" defaultValue="CompactTempFile" type="enum">
        <description>
          This option only takes effect if at least one of the enableBboxBuilder and enableLinestringBuilder options are enabled. Both geometry builder implementations require knowledge of all node locations. This option specifies how those nodes are temporarily stored. If you have large amounts of memory (at least 6GB of system memory, a 64-bit JVM and at least 4GB of JVM RAM specified with the -Xmx option) you may use the "InMemory" option. Otherwise you must choose between the "TempFile" option which is much slower but still faster than relying on the default database geometry building implementation, or the "CompactTempFile" option which is more efficient for smaller datasets.
        </description>
        <enumValue value="InMemory" />
        <enumValue value="TempFile" />
        <enumValue value="CompactTempFile" />
      </parameter>
    </task>

    <task name="fast-write-pgsql" shortName="fwp">
      <description>
        Populates an empty PostGIS  database with a "simple" schema. This achieves the same result as the standard --write-pgsql task but uses the recent COPY support added to Java PostgreSQL JDBC drivers to improve import speed.
      </description>
      <inputPipe count="single"  index="0" type="entity" />
      <parameter name="authFile" defaultParameter="false" required="false" type="filename">
        <description>
          The name of the file containing database login credentials.
        </description>
      </parameter>
      <parameter name="host" defaultParameter="false" required="false" defaultValue="localhost" type="string">
        <description>
          The database host server.
        </description>
      </parameter>
      <parameter name="database" defaultParameter="false" required="false" defaultValue="osm" type="string">
        <description>
          The database instance.
        </description>
      </parameter>
      <parameter name="user" defaultParameter="false" required="false" defaultValue="osm" type="string">
        <description>
          The database user name.
        </description>
      </parameter>
      <parameter name="password" defaultParameter="false" required="false" type="string">
        <description>
          The database password.
        </description>
      </parameter>
      <parameter name="validateSchemaVersion" defaultParameter="false" required="false" defaultValue="true" type="boolean" booleanEncoding="yesno">
        <description>
          If yes is specified, the task will validate the current schema version before accessing the database.
        </description>
      </parameter>
      <parameter name="allowIncorrectSchemaVersion" defaultParameter="false" required="false" defaultValue="true" type="boolean" booleanEncoding="yesno">
        <description>
          If validateSchemaVersion is yes, this option controls the result of a schema version check failure. If this option is yes, a warning is displayed and execution continues. If this option is no, an error is displayed and the program aborts.
        </description>
      </parameter>
      <parameter name="enableBboxBuilder" defaultParameter="false" required="false" defaultValue="false" type="boolean" booleanEncoding="yesno">
        <description>
          If yes is specified, the task will build the bbox geometry column using a java-based solution instead of running a post-import query. Using this option provides significant performance improvements compared to the default query approach. Note that the task will fail if this option is enabled and the bbox column doesn't exist.
        </description>
      </parameter>
      <parameter name="enableLinestringBuilder" defaultParameter="false" required="false" defaultValue="false" type="boolean" booleanEncoding="yesno">
        <description>
          As per the enableBboxBuilder option but for the linestring geometry column.
        </description>
      </parameter>
      <parameter name="nodeLocationStoreType" defaultParameter="false" required="false" defaultValue="CompactTempFile" type="enum">
        <description>
          This option only takes effect if at least one of the enableBboxBuilder and enableLinestringBuilder options are enabled. Both geometry builder implementations require knowledge of all node locations. This option specifies how those nodes are temporarily stored. If you have large amounts of memory (at least 6GB of system memory, a 64-bit JVM and at least 4GB of JVM RAM specified with the -Xmx option) you may use the "InMemory" option. Otherwise you must choose between the "TempFile" option which is much slower but still faster than relying on the default database geometry building implementation, or the "CompactTempFile" option which is more efficient for smaller datasets.
        </description>
        <enumValue value="InMemory" />
        <enumValue value="TempFile" />
        <enumValue value="CompactTempFile" />
      </parameter>
    </task>
    
    <task name="write-pgsql-dump" shortName="wpd">
      <description>
        Writes a set of data files suitable for loading a PostGIS database with a "simple" schema using COPY statements. A schema creation script is available in the osmosis script directory. A load script is also available which will invoke the COPY statements and update all indexes and special index support columns appropriately. This option should be used on large import data (like the planet file), since it is much faster than --write-pgsql.
      </description>
      <inputPipe count="single"  index="0" type="entity" />
      <parameter name="directory" type="string" required="true" defaultValue="pgimport" defaultParameter="false">
        <description>
          The name of the directory to write the data files into.
        </description>
      </parameter>
      <parameter name="enableBboxBuilder" defaultParameter="false" required="false" defaultValue="false" type="boolean" booleanEncoding="yesno">
        <description>
          If yes is specified, the task will build the bbox geometry column using a java-based solution instead of running a post-import query. Using this option provides significant performance improvements compared to the default query approach. Note that the task will fail if this option is enabled and the bbox column doesn't exist.
        </description>
      </parameter>
      <parameter name="enableLinestringBuilder" defaultParameter="false" required="false" defaultValue="false" type="boolean" booleanEncoding="yesno">
        <description>
          As per the enableBboxBuilder option but for the linestring geometry column.
        </description>
      </parameter>
      <parameter name="nodeLocationStoreType" defaultParameter="false" required="false" defaultValue="CompactTempFile" type="enum">
        <description>
          This option only takes effect if at least one of the enableBboxBuilder and enableLinestringBuilder options are enabled. Both geometry builder implementations require knowledge of all node locations. This option specifies how those nodes are temporarily stored. If you have large amounts of memory (at least 6GB of system memory, a 64-bit JVM and at least 4GB of JVM RAM specified with the -Xmx option) you may use the "InMemory" option. Otherwise you must choose between the "TempFile" option which is much slower but still faster than relying on the default database geometry building implementation, or the "CompactTempFile" option which is more efficient for smaller datasets.
        </description>
        <enumValue value="InMemory" />
        <enumValue value="TempFile" />
        <enumValue value="CompactTempFile" />
      </parameter>
    </task>

    <task name="truncate-pgsql" shortName="tp">
      <description>
        Truncates all tables in a PostGIS with a "simple" schema.
      </description>
      <parameter name="authFile" defaultParameter="false" required="false" type="filename">
        <description>
          The name of the file containing database login credentials.
        </description>
      </parameter>
      <parameter name="host" defaultParameter="false" required="false" defaultValue="localhost" type="string">
        <description>
          The database host server.
        </description>
      </parameter>
      <parameter name="database" defaultParameter="false" required="false" defaultValue="osm" type="string">
        <description>
          The database instance.
        </description>
      </parameter>
      <parameter name="user" defaultParameter="false" required="false" defaultValue="osm" type="string">
        <description>
          The database user name.
        </description>
      </parameter>
      <parameter name="password" defaultParameter="false" required="false" type="string">
        <description>
          The database password.
        </description>
      </parameter>
      <parameter name="validateSchemaVersion" defaultParameter="false" required="false" defaultValue="true" type="boolean" booleanEncoding="yesno">
        <description>
          If yes is specified, the task will validate the current schema version before accessing the database.
        </description>
      </parameter>
      <parameter name="allowIncorrectSchemaVersion" defaultParameter="false" required="false" defaultValue="true" type="boolean" booleanEncoding="yesno">
        <description>
          If validateSchemaVersion is yes, this option controls the result of a schema version check failure. If this option is yes, a warning is displayed and execution continues. If this option is no, an error is displayed and the program aborts.
        </description>
      </parameter>
    </task>

      <task name="write-pgsql-change" shortName="wpc">
        <description>
          Write changes to PostGIS database with "simple" schema.
        </description>
        <inputPipe count="single"  index="0" type="change" />
        <parameter name="authFile" defaultParameter="false" required="false" type="filename">
          <description>
            The name of the file containing database login credentials.
          </description>
        </parameter>
        <parameter name="host" defaultParameter="false" required="false" defaultValue="localhost" type="string">
          <description>
            The database host server.
          </description>
        </parameter>
        <parameter name="database" defaultParameter="false" required="false" defaultValue="osm" type="string">
          <description>
            The database instance.
          </description>
        </parameter>
        <parameter name="user" defaultParameter="false" required="false" defaultValue="osm" type="string">
          <description>
            The database user name.
          </description>
        </parameter>
        <parameter name="password" defaultParameter="false" required="false" type="string">
          <description>
            The database password.
          </description>
        </parameter>
        <parameter name="validateSchemaVersion" defaultParameter="false" required="false" defaultValue="true" type="boolean" booleanEncoding="yesno">
          <description>
            If yes is specified, the task will validate the current schema version before accessing the database.
          </description>
        </parameter>
        <parameter name="allowIncorrectSchemaVersion" defaultParameter="false" required="false" defaultValue="true" type="boolean" booleanEncoding="yesno">
          <description>
            If validateSchemaVersion is yes, this option controls the result of a schema version check failure. If this option is yes, a warning is displayed and execution continues. If this option is no, an error is displayed and the program aborts.
          </description>
        </parameter>
      </task>
  </taskGroup>

  <taskGroup id="api" friendlyName="API Tasks">
    <description>
      These tasks provide the ability to interact directly with the OSM API. This is the API that is used directly by editors such as JOSM.
    </description>
    <task name="read-api" shortName="ra">
      <description>
        Retrieves the contents of a bounding box from the API. This is subject to the bounding box size limitations imposed by the API.
      </description>
      <outputPipe index="0" count="single" type="entity" />
      <parameter name="url" type="uri" required="true" defaultValue="http://www.openstreetmap.org/api/0.6">
        <description>
          The url of the API server.
        </description>
      </parameter>
      <parameter name="bbox" type="bbox" required="true" />
    </task>

    <task name="upload-xml-change">
      <description>
        Uploade a changeset to an existing populated API server via HTTP.
      </description>
      <inputPipe index="0" count="single" type="change" />
      <parameter name="server" type="uri" required="true" defaultValue="http://api.openstreetmap.org/api/0.6">
        <description>
          The url of the API server.
        </description>
      </parameter>
      <parameter name="user" type="string" required="true">
        <description>
          The api user name.
        </description>
      </parameter>
      <parameter name="password" type="string" required="true">
        <description>
          The api password.
        </description>
      </parameter>
    </task>
  </taskGroup>

  <taskGroup id="dataset" friendlyName="Dataset Tasks">
    <description>
      Dataset tasks are those that act on on the generic dataset interface exposed by several data stores. For example the #PostGIS Tasks. These tasks allow data queries and data manipulation to be performed in a storage method agnostic manner.
    </description>
    <task name="dataset-bounding-box" shortName="dbb">
      <description>
        Extracts data within a specific bounding box defined by lat/lon coordinates. This differs from the --bounding-box task in that it operates on a dataset instead of an entity stream, in other words it uses the features of the underlying database to perform a spatial query instead of examining all nodes in a complete stream. This implementation will never clip ways at box boundaries, and depending on the underlying implementation may detect ways crossing a box without having any nodes within that box.
      </description>
      <inputPipe count="single" index="0" type="dataset" />
      <outputPipe count="single" index="0" type="entity" />
      <parameter name="bbox" type="bbox" required="true">
        <description>The bounding box to filter.</description>
      </parameter>
      <parameter name="completeWays" type="boolean" booleanEncoding="yesno" defaultValue="false">
        <description>
          Include all available nodes for ways which have at least one node in the bounding box.
        </description>
      </parameter>      
    </task>
    <task name="dataset-dump" shortName="dd">
      <description>
        Converts an entire dataset to an entity stream.
      </description>
      <inputPipe count="single" index="0" type="dataset" />
      <outputPipe count="single" index="0" type="entity" />
    </task>
  </taskGroup>

  <taskGroup id="report" friendlyName="Reporting Tasks">
    <description>
     These tasks provide summaries of data processed by the pipeline.
    </description>
    <task name="report-entity" shortName="re">
      <description>
        Produces a summary report of each entity type and the users that last modified them.
      </description>
      <inputPipe count="single" index="0" type="entity" />
      <parameter name="file" defaultParameter="true" type="filename" required="true" defaultValue="entity-report.txt">
        <description>
          The file to write the report to.
        </description>
      </parameter>
    </task>
    <task name="report-integrity" shortName="ri">
      <description>
        Produces a list of the referential integrity issues in the data source.
      </description>
      <inputPipe count="single" index="0" type="entity" />
      <parameter name="file" defaultParameter="true" type="filename" required="true" defaultValue="integrity-report.txt">
        <description>
          The file to write the report to.
        </description>
      </parameter>
    </task>
  </taskGroup>

  <taskGroup id="replication" friendlyName="Replication Tasks">
    <description>
      These tasks are used for replicating changes between data stores. They typically work with change streams and can therefore be coupled with other change stream tasks depending on the job to be performed.
    </description>
    <task name="read-change-interval" shortName="rci">
      <description>
        Retrieves a set of change files from a server, merges them into a single stream, and tracks the current timestamp. The changes produced by this task are typically delta changes.
      </description>
      <outputPipe count="single" index="0" type="change" />
      <parameter name="workingDirectory" type="directory" defaultParameter="true">
        <description>
          The directory containing the state and config files.
        </description>
      </parameter>
    </task>
    <task name="read-change-interval-init" shortName="rcii">
      <description>
        Initialises a working directory to contain files necessary for use by the --read-change-interval task. This task must be run once to create the directory structure and the configuration file manually edited to contain the required settings.
      </description>
      <parameter name="workingDirectory" type="directory" defaultParameter="true">
        <description>
          The directory to populate with state and config files.
        </description>
      </parameter>
      <parameter name="initialDate" type="instant">
        <description>
          The timestamp to begin replication from. Only changesets containing data after this timestamp will be downloaded. Note that unlike most tasks accepting dates, this date is specified in UTC.
        </description>
      </parameter>
    </task>
    <task name="read-replication-interval" shortName="rri">
      <description>
        Retrieves a set of replication files from a server, combines them into a single stream, sorts the result, and tracks the current timestamp. Available since osmosis 0.32.
        The changes produced by this task are typically full-history changes.
      </description>
      <outputPipe count="single" index="0" type="change" />
      <parameter name="workingDirectory" type="directory" defaultParameter="true">
        <description>
          The directory containing the state and config files.
        </description>
      </parameter>
    </task>
    <task name="read-replication-interval-init" shortName="rrii">
      <description>
        Initialises a working directory to contain files necessary for use by the --read-replication-interval task. This task must be run once to create the directory structure and the configuration file manually edited to contain the required settings.
      </description>
      <parameter name="workingDirectory" type="directory" defaultParameter="true">
        <description>
          The directory to populate with state and config files.
        </description>
      </parameter>
    </task>
    <task name="merge-replication-files" shortName="mrf">
      <description>
        Retrieves a set of replication files from a server, combines them into larger time intervals, sorts the result, and tracks the current timestamp. The changes produced by this task are full-history changes.
      </description>
      <parameter name="workingDirectory" type="directory" defaultParameter="true">
        <description>
          The directory containing the state and config files.
        </description>
      </parameter>
    </task>
    <task name="merge-replication-files-init" shortName="mrfi">
      <description>
        Initialises a working directory to contain files necessary for use by the --merge-replication-files task. This task must be run once to create the directory structure and the configuration file manually edited to contain the required settings.
      </description>
      <parameter name="workingDirectory" type="directory" defaultParameter="true">
        <description>
          The directory containing the state and config files.
        </description>
      </parameter>
    </task>

    <task name="replicate-apidb" shortName="repa">
      <description>
        This task provides replication files for consumers to download. It is primarily run against the production API database with the results made available on the planet server.
        The first time this task runs it will initialise the working directory with the current state of the database server. Every subsequent invocation will read all changes since the last invocation and write the results to the output. All changes will be sorted by type, then id, then version.
      </description>
      <outputPipe count="single"  index="0" type="change" />
      <parameter name="authFile" defaultParameter="false" required="false" type="filename">
        <description>
          The name of the file containing database login credentials.
        </description>
      </parameter>
      <parameter name="host" defaultParameter="false" required="false" defaultValue="localhost" type="string">
        <description>
          The database host server.
        </description>
      </parameter>
      <parameter name="database" defaultParameter="false" required="false" defaultValue="osm" type="string">
        <description>
          The database instance.
        </description>
      </parameter>
      <parameter name="user" defaultParameter="false" required="false" defaultValue="osm" type="string">
        <description>
          The database user name.
        </description>
      </parameter>
      <parameter name="password" defaultParameter="false" required="false" type="string">
        <description>
          The database password.
        </description>
      </parameter>
      <parameter name="validateSchemaVersion" defaultParameter="false" required="false" defaultValue="true" type="boolean" booleanEncoding="yesno">
        <description>
          If yes is specified, the task will validate the current schema version before accessing the database.
        </description>
      </parameter>
      <parameter name="allowIncorrectSchemaVersion" defaultParameter="false" required="false" defaultValue="true" type="boolean" booleanEncoding="yesno">
        <description>
          If validateSchemaVersion is yes, this option controls the result of a schema version check failure. If this option is yes, a warning is displayed and execution continues. If this option is no, an error is displayed and the program aborts.
        </description>
      </parameter>
      <parameter name="readAllUsers" defaultParameter="false" required="false" defaultValue="false" type="boolean" booleanEncoding="yesno">
        <description>
          If set to yes, the user public edit flag will be ignored and user information will be attached to every entity.
        </description>
      </parameter>
      <parameter name="directory" type="directory" defaultValue="replicate" required="true">
        <description>
          The working directory.
        </description>
      </parameter>
    </task>
    <task name="read-replication-lag" shortName="rrl">
      <description>
        This Task takes the state.txt in an replication working directory and compares its timestamp (that's the timestamp of the last chunk of that that osmosis downloaded) with the timestamp of the servers state.txt (that's the timestamp of the last chunk of that that the server has produced). It then calculates the difference and prints it to stdout. In order to get only the printed value its often useful to pipe the log messages on stderr to /dev/null.
      </description>
      <parameter name="workingDirectory" type="directory" defaultParameter="true">
        <description>
          The directory to populate with state and config files.
        </description>
      </parameter>
      <parameter name="humanReadable" required="false" type="boolean" booleanEncoding="yesno" defaultValue="false">
        <description>
          print the replication lag in a human readable format
        </description>
      </parameter>
    </task>
  </taskGroup>

  <taskGroup id="pbf" friendlyName="PBF Binary Tasks">
    <description>
      The binary tasks are used to read and write ProtocolBufBinary (.pbf) files.
    </description>
    <task name="read-pbf" shortName="rb">
      <description>
        Reads the current contents of an OSM binary file.
      </description>
      <outputPipe index="0" count="single" type="entity" />
      <parameter name="file" defaultParameter="true" defaultValue="dump.osm.pbf" type="filename">
        <description>
          The name of the file to be read.
        </description>
      </parameter>
    </task>
    <task name="write-pbf" shortName="wb">
      <description>
        Writes data to an OSM binary file.
      </description>
      <inputPipe index="0" count="single" type="entity" />
      <parameter name="file" defaultParameter="true" defaultValue="dump.osm.pbf" type="filename">
        <description>
          The name of the file to be written.
        </description>
      </parameter>
      <parameter name="batchlimit" required="false" type="int" defaultValue="8000" defaultParameter="false">
        <description>
          Block size used when compressing. This is a reasonable default. Batchlimits that are too big may cause files to exceed the defined filesize limits.
        </description>
      </parameter>
      <parameter name="omitmetadata" type="boolean" booleanEncoding="truefalse" defaultParameter="false" defaultValue="false">
        <description>
          Omit non-geographic metadata on OSM entities. This includes version number and timestamp of the last edit to the entity as well as the user name and id of the last modifier. Omitting this metadata can save 15% of the file size when exporting to software that does not need this data.
        </description>
      </parameter>
      <parameter name="usedense" type="boolean" booleanEncoding="truefalse" defaultParameter="false" defaultValue="true">
        <description>
          Nodes can be represented in a regular format or a dense format. The dense format is about 30% smaller, but more complex. To make it easier to interoperate with (future) software that chooses to not implement the dense format, the dense format may be disabled.
        </description>
      </parameter>
      <parameter name="granularity" type="int" defaultParameter="false" defaultValue="100">
        <description>
          The granularity or precision used to store coordinates. The default of 100 nanodegrees is the highest precision used by OSM, corresponding to about 1.1cm at the equator. In the current osmosis implementation, the granularity must be a multiple of 100. If map data is going to be exported to software that does not need the full precision, increasing the granularity to 10000 nanodegrees can save about 10% of the file size, while still having 1.1m precision.
        </description>
      </parameter>
      <parameter name="compress" type="enum" defaultParameter="false" defaultValue="deflate">
        <description>
          'deflate' uses deflate compression on each block. 'none' disables compression. These files are about twice as fast to write and twice the size.
        </description>
        <enumValue value="deflate" />
        <enumValue value="none" />
      </parameter>
    </task>
  </taskGroup>

</osmosisTaskDescription>
